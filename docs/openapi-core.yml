openapi: 3.0.3
info:
  title: Java API Exercise - Core Criteria
  description: |-
  version: 0.2.2

servers:
  - url: http://localhost:4000
tags:
  - name: users
  - name: posts
paths:
  /posts:
    post:
      tags:
        - posts
      summary: Post POST route
      description: Description of a post POST route
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    get:
      tags:
        - posts
      summary: Post GET route
      description: Description of a post GET route
      operationId: getAllPosts
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllPosts'
  /posts/{id}:
    put:
      tags:
        - posts
      summary: Post PUT route
      description: Description of a post PUT route
      operationId: updatePost
      parameters:
        - name: id
          in: path
          description: The ID of the post to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '201':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    delete:
      tags:
        - posts
      summary: Post DELETE route
      description: Description of a post DELETE route
      operationId: deletePost
      parameters:
        - name: id
          in: path
          description: The ID of the post to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /users:
    post:
      tags:
        - users
      summary: User POST route
      description: Description of a user POST route
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    get:
      tags:
        - users
      summary: User GET route
      description: Description of a user GET route
      operationId: getAllUsers
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
  /users/{id}:
    put:
      tags:
        - users
      summary: User PUT route
      description: Description of a user PUT route
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: The ID of the user to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      tags:
        - users
      summary: User DELETE route
      description: Description of a user DELETE route
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The ID of the user to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

components:
  schemas:
    CreatePost:
      type: object
      required: [ content, userid ]
      properties:
        content:
          type: string
          example: "Eating doritos lol.."
        userid:
          type: integer
          example: 1
    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        content:
          type: string
          example: "Eating doritos lol.."
        userid:
          type: integer
          example: 1
        createdAt:
          type: string
          format: DateTime
          example: 2024-02-19T15:30:45
        updatedAt:
          type: string
          format: DateTime
          example: 2024-02-19T15:30:45
    AllPosts:
      type: array
      items:
        $ref: '#/components/schemas/Post'
    CreateUser:
      type: object
      required: [ name, username, dob, phone ]
      properties:
        name:
          type: string
          example: "Johnny Rocket"
        username:
          type: string
          example: "applelover234"
        dob:
          type: string
          example: "02.02.02"
        phone:
          type: string
          example: "49593392"
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Johnny Rocket"
        username:
          type: string
          example: "applelover234"
        dob:
          type: string
          example: "02.02.02"
        phone:
          type: string
          example: "49593392"
        createdAt:
          type: string
          format: DateTime
          example: 2024-02-19T15:30:45
        updatedAt:
          type: string
          format: DateTime
          example: 2024-02-19T15:30:45
    AllUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'
