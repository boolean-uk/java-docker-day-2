openapi: 3.0.3
info:
  title: docker-day-2-java-core
  description: docker-day-2-java-core
  version: 0.2.2
  contact:
    name: docker-day-2-java-core

servers:
  - url: http://localhost:4000

tags:
  - name: users
  - name: posts

paths:
  /auth/signup:
    post:
      tags:
        - users
      summary: User Signup
      description: Create a new user account
      operationId: userSignup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Successfully created a new user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /auth/signin:
    post:
      tags:
        - users
      summary: User Signin
      description: Sign in an existing user
      operationId: userSignin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignin'
      responses:
        '200':
          description: Successfully signed in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /posts:
    post:
      tags:
        - posts
      summary: Create a post
      description: Create a new post
      operationId: createPost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '201':
          description: Successfully created a new post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    get:
      tags:
        - posts
      summary: Get all posts
      description: Get a list of every post.
      operationId: getPosts
      responses:
        '200':
          description: Get a list of all posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllPosts'

  /posts/{id}:
    get:
      tags:
        - posts
      summary: Get a post
      description: Get a specific post.
      operationId: getPost
      parameters:
        - name: id
          in: path
          description: The ID of the post to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully retrieved the specified post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    put:
      tags:
        - posts
      summary: Update a post
      description: Update an existing post. For ease of implementation, all fields are required from the client.
      operationId: updatePost
      parameters:
        - name: id
          in: path
          description: The ID of the post to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '200':
          description: Successfully updated the specified post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
    delete:
      tags:
        - posts
      summary: Delete a post
      description: Delete an existing post. When deleting data, it's useful to send the deleted record back to the client so they can re-create it if deletion was a mistake.
      operationId: deletePost
      parameters:
        - name: id
          in: path
          description: The ID of the post to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted the specified post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

components:
  schemas:
    CreateUser:
      type: object
      required: [ name, email, password, roles ]
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: string
          example: "John@email.com"
        password:
          type: string
          format: string
          example: "password"
        roles:
          type: array
          format: array
          example: ["user"]
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john.doe@example.com"
    AllUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'

    UserSignin:
      type: object
      required: [ username, password ]
      properties:
        username:
          type: string
          example: "John Doe"
        password:
          type: string
          format: string
          example: "password"

    CreatePost:
      type: object
      required: [ title, type ]
      properties:
        content:
          type: string
          example: "this is my new post"
    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        content:
          type: string
          example: "this is my new post"
    AllPosts:
      type: array
      items:
        $ref: '#/components/schemas/Post'

  securitySchemes:
    jwt:
      type: apiKey
      in: header
      name: Authorization
