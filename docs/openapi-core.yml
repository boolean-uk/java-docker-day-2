openapi: 3.0.0
info:
  title: Micro-Blogging Platform API
  description: API for managing users and posts in a micro-blogging platform.
  version: 1.0.0
servers:
  - url: http://localhost:4000
    description: Local server
tags:
  - name: Users
    description: Operations related to managing users
  - name: Posts
    description: Operations related to managing posts
paths:
  /users:
    get:
      summary: Get all users
      operationId: getAllUsers
      tags:
        - Users
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: The created user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
          description: ID of the user to get.
      responses:
        '200':
          description: The requested user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      summary: Update a user
      operationId: updateUser
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
          description: ID of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: The updated user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      summary: Delete a user
      operationId: deleteUser
      tags:
        - Users
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
          description: ID of the user to delete.
      responses:
        '200':
          description: User deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
  /posts:
    get:
      summary: Get all posts
      operationId: getAllPosts
      tags:
        - Posts
      responses:
        '200':
          description: A list of posts.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
    post:
      summary: Create a new post
      operationId: createPost
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '201':
          description: The created post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
  /posts/{id}:
    get:
      summary: Get a post by ID
      operationId: getPostById
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
          description: ID of the post to get.
      responses:
        '200':
          description: The requested post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    put:
      summary: Update a post
      operationId: updatePost
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
          description: ID of the post to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostRequest'
      responses:
        '200':
          description: The updated post.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
    delete:
      summary: Delete a post
      operationId: deletePost
      tags:
        - Posts
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int32
          description: ID of the post to delete.
      responses:
        '200':
          description: Post deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: User ID
          example: 1
        username:
          type: string
          description: Username
          example: john_doe
    UserRequest:
      type: object
      properties:
        username:
          type: string
          description: Username
          example: john_doe
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Post ID
          example: 1
        content:
          type: string
          description: Post content
          example: Hello, World!
        user:
          $ref: '#/components/schemas/User'
    PostRequest:
      type: object
      properties:
        user_id:
          type: integer
          description: User ID
          example: 1
        content:
          type: string
          description: Post content
          example: Hello, World!
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          description: Error message
