openapi: 3.0.3
info:
  title: Docker day 2 - Extension Criteria
  description: Extension
  version: 1.0.0
  contact:
    name: Docker day 2

servers:
  - url: http://localhost:4000
tags:
  - name: posts
  - name: auth
paths:
  /auth/roles:
    post:
      tags:
        - auth
      summary: Add roles to database
      description: Initial add roles to database to be able to register users
      operationId: AddRoles
      responses:
        '200':
          description: Successfully added roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthRoles'
  /auth/signup:
    post:
      tags:
        - auth
      summary: Signup
      description: Make a new user
      operationId: SignUp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
      responses:
        '200':
          description: Successfully signed in as a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignupSuccess'
  /auth/signin:
    post:
      tags:
        - auth
      summary: Signin by username and password
      description: Signin by username and password
      operationId: SignIn
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signin'
      responses:
        '200':
          description: Successfully signed in as a user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
  /posts:
    get:
      tags:
        - posts
      summary: Get all posts
      description: Get a list of all posts
      operationId: GetPosts
      responses:
        '200':
          description: List of posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllPosts'
  /posts/{id}:
    get:
      tags:
        - posts
      summary: Get a post
      description: Get a post by id
      operationId: GetPost
      parameters:
        - name: id
          in: path
          description: The ID of the post to get
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: No post with that ID found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
  /posts/user/{id}:
    post:
      tags:
        - posts
      summary: Create a post
      description: Create a new post
      operationId: CreatePost
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      parameters:
        - name: id
          in: path
          description: The ID of the user to create a post for
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Successfully created post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          description: Bad request, please check all fields are correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '401':
          description: Not able to post on someone else page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
        '404':
          description: No user with that ID found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404User'
    get:
      tags:
        - posts
      summary: Get a list of posts
      description: Get a list of posts by a user
      operationId: GetPostsByUser
      parameters:
        - name: id
          in: path
          description: The ID of the user to get the posts for
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully returned posts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllPosts'
        '404':
          description: No user with that ID found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404User'
  /posts/user/{user_id}/post/{post_id}:
    put:
      tags:
        - posts
      summary: Update a post
      description: Update a post
      operationId: updatePost
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to update a post for
          required: true
          schema:
            type: integer
        - name: post_id
          in: path
          description: The ID of the post to update
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '201':
          description: Successfully updated post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: No post or no user with that ID found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        '400':
          description: Bad request, please check all fields are correct
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error400'
        '401':
          description: Not able to update on someone else page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'
    delete:
      tags:
        - posts
      summary: Delete a post
      description: Delete a post by the id
      operationId: deletePost
      parameters:
        - name: user_id
          in: path
          description: The ID of the user to update a post for
          required: true
          schema:
            type: integer
        - name: post_id
          in: path
          description: The ID of the post to update
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successfully deleted post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '404':
          description: No post or no user with that ID found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error404'
        '401':
          description: Not able to delete on someone else page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error401'

components:
  schemas:
    AuthRoles:
      type: string
      example: "Roles added to the database"
    SignupSuccess:
      type: string
      example: "User registered successfully"
    Signup:
      type: object
      required: [username, email, password, role]
      properties:
        username:
          type: string
          example: "marit"
        email:
          type: string
          example: "marit@boolean.com"
        password:
          type: string
          example: "password"
        role:
          type: array
          example:  ["user", "admin"]
    Signin:
      type: object
      required: [username, password]
      properties:
        username:
          type: string
          example: "marit"
        password:
          type: string
          example: "password"
    JwtResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJtYXJpdF9yZWd1bGFyX3VzZXIiLCJpYXQiOjE3MDgzMzQwNTIsImV4cCI6MTcwODQyMDQ1Mn0.sk2s1TyQPUGdQjCw1MOxY-KlaELFXDd3slcCsrhSUJY"
        type:
          type: string
          example: "Bearer"
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "marit"
        email:
          type: string
          example: "marit@boolean.com"
        roles:
          type: array
          example:  ["ROLE_USER", "ROLE_ADMIN"]
    CreatePost:
      type: object
      required: [content]
      properties:
        content:
          type: string
          example: "My first post"
    Post:
      type: object
      properties:
        id:
          type: integer
          example: 1
        content:
          type: string
          example: "My first post"
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            username:
              type: string
              example: "marit"
        postedAt:
          type: string
          format: LocalDateTime
          example: "2024-02-19T11:54:46.535678"
        updatedAt:
          type: string
          format: LocalDateTime
          example: "2024-02-19T11:54:46.535678"
    PostResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: object
          properties:
            id:
              type: integer
              example: 1
            content:
              type: string
              example: "My first post"
            user:
              type: object
              properties:
                id:
                  type: integer
                  example: 1
                username:
                  type: string
                  example: "marit"
            postedAt:
              type: string
              format: LocalDateTime
              example: "2024-02-19T11:54:46.535678"
            updatedAt:
              type: string
              format: LocalDateTime
              example: "2024-02-19T11:54:46.535678"
    AllPosts:
      type: object
      properties:
        status:
          type: string
          example: "success"
        data:
          type: array
          items:
            $ref: '#/components/schemas/Post'

    Error400:
      type: object
      properties:
        status:
          type: string
          example: "error"
        data:
          type: object
          properties:
            message:
              type: string
              example: "The post needs content"
    Error404:
      type: object
      properties:
        status:
          type: string
          example: "error"
        data:
          type: object
          properties:
            message:
              type: string
              example: "No post with that id found"
    Error404User:
      type: object
      properties:
        status:
          type: string
          example: "error"
        data:
          type: object
          properties:
            message:
              type: string
              example: "No user with that id found"
    Error401:
      type: object
      properties:
        status:
          type: string
          example: "error"
        data:
          type: object
          properties:
            message:
              type: string
              example: "You are only allowed to create/update/delete posts on your own page"